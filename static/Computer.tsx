/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    motherboard: THREE.Mesh
    gpu: THREE.Mesh
    io: THREE.Mesh
    ['motherboard-gpu-io']: THREE.Mesh
    ['motherboard-cpu-io']: THREE.Mesh
    ram: THREE.Mesh
    cpu: THREE.Mesh
    ssd: THREE.Mesh
  }
  materials: {
    green: THREE.MeshStandardMaterial
    blue: THREE.MeshStandardMaterial
    white: THREE.MeshStandardMaterial
    red: THREE.MeshStandardMaterial
    sand: THREE.MeshStandardMaterial
  }
}

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/computer.glb') as GLTFResult
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.motherboard.geometry} material={materials.green} />
      <mesh geometry={nodes.gpu.geometry} material={nodes.gpu.material} position={[0, -0.08, 0.06]} />
      <mesh geometry={nodes.io.geometry} material={nodes.io.material} position={[-0.09, 0.01, 0.03]} />
      <mesh
        geometry={nodes['motherboard-gpu-io'].geometry}
        material={nodes['motherboard-gpu-io'].material}
        position={[-0.04, -0.08, -0.01]}
      />
      <mesh geometry={nodes['motherboard-cpu-io'].geometry} material={materials.white} />
      <mesh geometry={nodes.ram.geometry} material={materials.red} position={[0.07, 0.01, 0.04]} />
      <mesh geometry={nodes.cpu.geometry} material={materials.sand} position={[0, 0, 0.02]} />
      <mesh geometry={nodes.ssd.geometry} material={nodes.ssd.material} position={[0, 0.06, 0.02]} />
    </group>
  )
}

useGLTF.preload('/computer.glb')
